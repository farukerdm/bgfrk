name: Code Quality Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  pylint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pylint black isort
    
    - name: Code formatting check with black
      run: |
        echo "Checking code formatting with black..."
        black --check --diff . || echo "Code formatting issues found. Run 'black .' to fix."
    
    - name: Import sorting check with isort
      run: |
        echo "Checking import sorting with isort..."
        isort --check-only --diff . || echo "Import sorting issues found. Run 'isort .' to fix."
    
    - name: Lint with pylint
      run: |
        echo "Running pylint analysis..."
        # Create pylint configuration if it doesn't exist
        if [ ! -f ".pylintrc" ]; then
          cat > .pylintrc << EOF
        [MASTER]
        disable=missing-docstring,too-few-public-methods,too-many-locals,too-many-branches,too-many-statements
        ignore=venv,.venv,__pycache__
        
        [FORMAT]
        max-line-length=120
        
        [DESIGN]
        max-args=10
        max-locals=20
        max-branches=15
        max-statements=60
        
        [VARIABLES]
        unused-variable=warning
        
        [MESSAGES CONTROL]
        disable=import-error,no-member,no-name-in-module
        EOF
        fi
        
        # Run pylint on Python files
        find . -name "*.py" -not -path "./.venv/*" -not -path "./venv/*" -not -path "./.git/*" | xargs pylint --output-format=text || true
        
        # Generate pylint report
        find . -name "*.py" -not -path "./.venv/*" -not -path "./venv/*" -not -path "./.git/*" | xargs pylint --output-format=json > pylint-report.json || true
    
    - name: Upload pylint results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: pylint-report-${{ matrix.python-version }}
        path: pylint-report.json
        retention-days: 7
    
    - name: Comment PR with pylint results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          try {
            const report = JSON.parse(fs.readFileSync('pylint-report.json', 'utf8'));
            const issues = report.filter(item => item.type === 'error' || item.type === 'warning');
            
            if (issues.length > 0) {
              let comment = '## 🔍 Pylint Code Quality Report\n\n';
              comment += `Found ${issues.length} issues:\n\n`;
              
              issues.slice(0, 10).forEach(issue => {
                comment += `- **${issue.type.toUpperCase()}** in \`${issue.path}:${issue.line}\`\n`;
                comment += `  ${issue.message}\n\n`;
              });
              
              if (issues.length > 10) {
                comment += `... and ${issues.length - 10} more issues.\n\n`;
              }
              
              comment += 'Run `pylint .` locally to see all issues.';
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '## ✅ Pylint Code Quality Report\n\n🎉 No issues found! Your code looks great!'
              });
            }
          } catch (error) {
            console.log('Could not parse pylint report:', error.message);
          }
